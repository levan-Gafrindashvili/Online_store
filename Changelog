# Changelog

All notable changes to this project will be documented in this file.

## [v0.4.6] - 2025-06-16

### Added
- **Pagination for Product List Page**  
  Implemented pagination in the `ProductListView` class using Django’s `Paginator`.  
  Updated `product_list.html` template to display page navigation links with dynamic filter/query parameter persistence.  
  Ensures a clean user experience with paginated product grids and navigation links at the bottom of the page.

### Changed
- **Context Data in ProductListView**  
  Modified the `get_context_data()` method to include `is_paginated` and `page_obj` in context for the template.  
  Styled pagination UI in CSS to match the existing design.

### Fixed
- **Module import error for `ProductListView`**  
  Resolved `ModuleNotFoundError: No module named 'shop.views.products_list'` by creating the missing `products_list.py` file inside `shop/views/`.  
  Moved the `ProductListView` class to `products_list.py` and updated `shop/views/__init__.py` to import it properly.  
  This fixed server startup errors caused by incorrect view imports.

---

## [v0.4.5] - 2025-06-10

### Fixed
- **Reverse URL error for `add_to_cart`**  
  Resolved `NoReverseMatch` error by ensuring that the `add_to_cart` URL is correctly defined in `shop/urls.py` and that its name (`name='add_to_cart'`) is correctly referenced in templates and views.  
  This fixed the homepage crash caused by unresolved reverse URL lookups when rendering product cards.

### Changed
- **Converted function-based views to class-based views**  
  Migrated key views such as `product_list`, `product_detail`, `add_to_cart`, and `cart_view` to class-based views for better structure and maintainability.  
  Templates (`product_list.html`, `product_detail.html`, `cart.html`) were updated accordingly to support `self.request` and context data changes.  
  Ensured proper `as_view()` usage in `shop/urls.py`.

### Added
- **Template updates for class-based views**  
  Modified templates to use updated context variables from CBVs:
  - Adjusted use of `{{ object }}`, `{{ object_list }}`, and `{{ view.get_context_data }}` in templates.
  - Updated form actions and URL reversing in templates to use namespaced URLs like `{% url 'shop:add_to_cart' product.id %}`.

---

## [v0.4.4] - 2025-06-09

### Fixed
- **NoReverseMatch error on login redirect**  
  Added `app_name = 'shop'` to `shop/urls.py` to enable URL namespacing.  
  Updated all URL reversing and redirects to use the namespaced URL name `'shop:product_list'` instead of `'product_list'`.  
  This resolved the error where Django could not find the `'product_list'` URL pattern.

## [v0.4.3] - 2025-06-09

### Fixed

- Resolved `OperationalError` caused by missing `fullname` column in the `Review` model by reapplying migrations after updating the model.
- Fixed Django warning `urls.W005` by ensuring URL namespace `'shop'` is only included once to avoid namespace conflicts and routing issues.
- Cleaned and simplified `config/urls.py`:
  - Removed redundant and duplicate inclusions of `shop.urls` under `/accounts/` and `/shop/`.
  - Kept a single, clear inclusion of `shop.urls` with the `shop` namespace as the main entry route.
  - Ensured clean integration with Django’s built-in auth views under `/accounts/`.

### Notes

- These changes improve routing clarity, prevent unexpected reverse URL resolution failures, and ensure that all paths defined in `shop/urls.py` work consistently without namespace conflicts.

## [v0.4.2] - 2025-06-09

### Changed

- Revamped login page design with a clean, modern, and responsive UI using soft shadows, rounded forms, and smooth transitions.
- Added scoped styles in `style.css` specifically targeting `.login-wrapper`, `.login-box`, `.form-group`, and related classes for the login page only.
- Ensured no unrelated or global CSS rules were affected, preserving styling consistency across other templates.
- Improved responsiveness and mobile layout for login forms.

## [v0.4.1] - 2025-06-08

### Changed

- Cleaned up and slimmed down CSS file by removing duplicate and unnecessary rules for better maintainability and performance.
- Simplified and optimized HTML templates (`product_list.html`, `product_detail.html`, `login.html`, `cart.html`, `add_product.html`) by removing redundant inline styles and unused elements, relying on the updated CSS for styling consistency.
- Improved semantic structure and reduced inline styling in the top bar, product cards, filters, and forms across templates.
- Added minimal necessary JavaScript in `product_detail.html` for tab and modal interactions with clean and concise code.

## [v0.4.0] - 2025-06-05

### Added

- Added login/logout links to the product list navbar for user authentication navigation.
- Implemented conditional rendering in navbar to show login link if user is anonymous and logout link if authenticated.
- Created CSS styles for the navbar, login, and logout links to improve UI consistency and responsiveness.
- Updated `product_list.html` template to integrate login/logout UI components within the top navigation bar.

## [v0.3.0] - 2025-06-05

### Added

- Implemented "Add to Cart" functionality with session-based cart management.
- Created cart views to display cart contents, update item quantities, and remove items.
- Added cart update functionality (increment, decrement, remove) via POST requests.
- Added "Add to Cart" button links on the product listing page.
- Created cart template (`cart.html`) displaying cart items, quantity controls, and total price.
- Created `utils.py` for helper functions such as managing session keys.

### Changed

- Updated product list template to include functional "Add to Cart" buttons linking to cart views.
- Enhanced URL routing to include cart-related paths (`cart_view`, `add_to_cart`, `update_cart`).

## [v0.2.0] - 2025-06-03

### Added

- Main page URL routing and view (`product_list`) with support for:
  - Displaying all products.
  - Searching by product name.
  - Filtering by category, subcategory, brand, price range, and rating.
- Template for product listing with product cards (image, name, price, rating, add-to-cart button).

## [v0.1.0] - 2025-06-02

### Added

- Project setup with virtual environment and Django installation.
- Created Django project and app (`shop`).
- Defined data models: Category, SubCategory, Brand, Product, Review, CartItem.
- Applied migrations and created superuser.
- Registered models in admin panel.
- Configured static and media files handling.
